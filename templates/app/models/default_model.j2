from sqlalchemy import Column, String, Numeric, Integer, UUID, ForeignKey, DateTime, Enum, func
from sqlalchemy.orm import relationship
from app.database.extensions import db
import uuid

{%- for enum_name, enum_data in enums.items() %}
{{ enum_data.definition }}
{% endfor %}

class {{ table_name.split('_')|map('capitalize')|join('') }}(db.Model):
    __tablename__ = '{{ table_name }}'

    {% for column, data_type, is_nullable, column_default in columns -%}
    {{ column }} = Column({{ map_sqlalchemy_type(column, data_type, enums) }}
        {% set sqlalchemy_type = map_sqlalchemy_type(column, data_type, enums) %}
        {{ sqlalchemy_type }}
        {%- if sqlalchemy_type == "String" and length %}({{ length }}){% endif %}
        {%- if column in primary_keys %}, primary_key=True
        {%- elif column_default == 'gen_random_uuid()' %}, default=uuid.uuid4
        {%- elif column_default == 'CURRENT_TIMESTAMP' %}, default=func.now()
        {%- elif column_default and column in enums %}, default={{ enum_name }}.{{ column_default.split("'")[1] }}
        {%- elif column_default %}, default={{ column_default }}
        {%- endif %}
        {%- if column == 'updated_at' %}, onupdate=func.now(){% endif %}
        {%- if column in foreign_keys %}, ForeignKey('{{ foreign_keys[column] }}'){% endif %}
        {%- if is_nullable == 'NO' %}, nullable=False{% endif %})
    {% endfor %}

    {%- for fk_column, ref in foreign_keys.items() %}
    {% set foreign_table, foreign_column = ref.split('.') -%}
    {{ fk_column }}_relation = relationship("{{ foreign_table.capitalize() }}")
    {%- endfor %}

    def __repr__(self):
        return f"<{{ table_name.split('_')|map('capitalize')|join('') }}({{ columns|map(attribute='0')|join(', ') }})>"

    def to_dict(self):
        return {
            {%- for column, _, _, _ in columns -%}
            "{{ column }}": self.{{ column }},
            {% endfor -%}
        }
