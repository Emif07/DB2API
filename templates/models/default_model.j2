from sqlalchemy import Column, String, Integer, UUID, ForeignKey, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import func
import uuid

Base = declarative_base()

class {{ table_name.capitalize() }}(Base):
    __tablename__ = '{{ table_name }}'

    {% for column, data_type, is_nullable, column_default in columns -%}
    {{ column }} = Column({{ map_sqlalchemy_type(data_type) }}
    {%- if column in primary_keys %}, primary_key=True{% endif -%}
    {% if column_default == 'gen_random_uuid()' -%}, default=uuid.uuid4{% elif column_default == 'CURRENT_TIMESTAMP' -%}, default=func.now(){% elif column_default %}, default={{ column_default }}{% endif -%}
    {% if column == 'updated_at' -%}, onupdate=func.now(){% endif -%}
    {% if column in foreign_keys -%}, ForeignKey('{{ foreign_keys[column] }}'){% endif -%}
    {% if is_nullable == 'NO' %}, nullable=False{% endif -%}
    )
    {% endfor -%}

    {%- for fk_column, ref in foreign_keys.items() %}
    {% set foreign_table, foreign_column = ref.split('.') -%}
    {{ fk_column }}_relation = relationship("{{ foreign_table.capitalize() }}")
    {%- endfor %}

    def __repr__(self):
        return "<{{ table_name.capitalize() }}({{ repr_string }})>"

    def __str__(self):
        return str(self.__dict__)

    def to_dict(self):
        return {
            {%- for column, _, _, _ in columns -%}
            "{{ column }}": self.{{ column }},
            {% endfor -%}
        }

        